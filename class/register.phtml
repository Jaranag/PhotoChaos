<?php 

    Class Register{

        private int $_id_user;
        private string $_first_name;
        private string $_last_name;
        private string $_username;
        private string $_password;
        private string $_repeat_password;
        private string $_email;
        private int $_birthdate;
        private string $_image_profile;

        private function __construct($_id_user,$_first_name,$_last_name,$_username,$_password,$_email,$_birthdate,$_image_profile,$_repeat_password){
           
            $this -> _id_user = $_id_user;
            $this -> _first_name = $_first_name;
            $this -> _last_name = $_last_name;
            $this -> _username = $_username;
            $this -> _password = $_password;
            $this -> _repeat_password = $_repeat_password;
            $this -> _email = $_email;
            $this -> _birthdate = $_birthdate;
            $this -> _image_profile = $_image_profile;
        
        }

        private function get_id_user() {
            return $this-> id_user; 
        }    

        private function get_first_name() {
            return $this -> _first_name; 
        }    

        private function get_last_name() {
            return $this -> _last_name; 
        }    

        private function get_username() {
            return $this -> _username; 
        }    

        private function get_password() {
            return $this -> _password; 
        }    

        private function get_repeat_password() {
            return $this -> _repeat_password; 
        }    

        private function get_email() {
            return $this -> _email; 
        }    

        private function get_birthdate() {
            return $this -> _birthdate; 
        }    
        
        private function get_image_profile() {
            return $this -> _image_profile; 
        }
            
        private function set_id_user($_id_user) {
            $this -> _id_user = $_id_user;
        }

        private function set_first_name($_first_name) {
            $this -> _first_name = $_first_name;
        }

        private function set_last_name($_last_name) {
            $this -> _last_name = $_last_name;
        }

        private function set_username($_username) {
            $this -> _username = $_username;
        }

        private function set_password($_password) {
            $this -> _password = $_password;
        }

        private function set_repeat_password($_repeat_password) {
            $this -> _repeat_password = $_repeat_password;
        }

        private function set_email($_email) {
            $this -> _email = $_email;
        }

        private function set_birthdate($_birthdate) {
            $this -> _birthdate = $_birthdate;
        }

        private function set_image_profile($_image_profile) {
            $this -> _image_profile = $_image_profile;
        }

        private function addUser() {
            /* Database credentials. Assuming you are running MySQL
            server with default setting (user 'root' with no password) */
            define('DB_SERVER', '');
            define('DB_USERNAME', '');
            define('DB_PASSWORD', '');
            define('DB_FIRST_NAME', '');
            define('DB_LAST_NAME', '');
            define('DB_BIRTHDATE', '');
            define('DB_IMAGE_PROFILE', '');
 
            /* Attempt to connect to MySQL database */
            $mysqli = new mysqli(DB_SERVER, DB_USERNAME, DB_PASSWORD, DB_FIRST_NAME, DB_LAST_NAME, DB_BIRTHDATE, DB_IMAGE_PROFILE);
 
            // Check connection
            if($mysqli === false){
             die("ERROR: Could not connect. " . $mysqli->connect_error);
            }

            require_once "config.php";
 
            // Define variables and initialize with empty values
            $_username = $_password = $_confirm_password = "";
            $_first_name = $_last_name = $_birthdate = $_image_profile = "";
            $username_err = $password_err = $confirm_password_err = "";
            $_first_name_err = $_last_name_err = $_birthdate_err = $_image_profile_err = "";
 
            // Processing form data when form is submitted
            if($_SERVER["REQUEST_METHOD"] == "POST"){
 
            // Validate username
             if(empty(trim($_POST["username"]))){
                $username_err = "Please enter a username.";
                } elseif(!preg_match('/^[a-zA-Z0-9_]+$/', trim($_POST["username"]))){
                $username_err = "Username can only contain letters, numbers, and underscores.";
                } else{ 
                // Prepare a select statement
                $sql = "SELECT id FROM users WHERE username = ?";
                }
            // Validate username
            if(empty(trim($_POST["username"]))){
                $username_err = "Please enter a username.";
                } elseif(!preg_match('/^[a-zA-Z0-9_]+$/', trim($_POST["username"]))){
                $username_err = "Username can only contain letters, numbers, and underscores.";
                } else{
                // Prepare a select statement
                $sql = "SELECT id_user FROM user WHERE username = ?";
        
        if($stmt = $mysqli->prepare($sql)){
            // Bind variables to the prepared statement as parameters
            $stmt->bind_param("s", $param_username);
            
            // Set parameters
            $param_username = trim($_POST["username"]);
            
            // Attempt to execute the prepared statement
            if($stmt->execute()){
                // store result
                $stmt->store_result();
                
                if($stmt->num_rows == 1){
                    $username_err = "This username is already taken.";
                } else{
                    $username = trim($_POST["username"]);
                }
            } else{
                echo "Oops! Something went wrong. Please try again later.";
            }

            // Close statement
            $stmt->close();
        }
    }
    
    // Validate password
    if(empty(trim($_POST["password"]))){
        $password_err = "Please enter a password.";     
    } elseif(strlen(trim($_POST["password"])) < 6){
        $password_err = "Password must have atleast 6 characters.";
    } else{
        $_password = trim($_POST["password"]);
    }
    
        // Validate confirm password
        if(empty(trim($_POST["confirm_password"]))){
        $confirm_password_err = "Please confirm password.";     
        } else{
        $_confirm_password = trim($_POST["confirm_password"]);
        if(empty($password_err) && ($password != $confirm_password)){
            $confirm_password_err = "Password did not match.";
        }

    }

    // Validate first name
    if(empty(trim($_POST["_first_name"]))){
        $_first_name_err = "Please confirm your first name.";     
        } else{
        $_first_name = trim($_POST["_first_name"]);
    }

    if(empty(trim($_POST["_last_name"]))){
        $_last_name = "Please confirm your last name.";     
        } else{
        $_last_name = trim($_POST["_last_name"]);
    }

    if(empty(trim($_POST["_birthdate"]))){
        $_birthdate = "Please confirm your birth date.";     
        } else{
        $_last_name = trim($_POST["_last_name"]);
    }


        // Check input errors before inserting in database
        if(empty($username_err) && empty($password_err) && empty($confirm_password_err) && empty($_first_name_err) && empty($_last_name_err) && empty($_birthdate_err)){
        
        // Prepare an insert statement
        $sql = "INSERT INTO users (username, password, first_name, last_name, birthdate, image_profile ) VALUES ($this -> _username, $this -> _password, $this -> _first_name, $this -> _last_name, $this -> _birthdate, $this -> _image_profile)";
         
            if($stmt = $mysqli->prepare($sql)){
            // Bind variables to the prepared statement as parameters
            $stmt->bind_param("ss", $param_username, $param_password);
            
            // Set parameters
            $param_username = $username;
            $param_password = password_hash($password, PASSWORD_DEFAULT); // Creates a password hash
            
            // Attempt to execute the prepared statement
            if($stmt->execute()){
                // Redirect to login page
                header("location: login.php");
            } else{
                echo "Oops! Something went wrong. Please try again later.";
            }

            // Close statement
            $stmt->close();
        }
    }
    
            // Close connection
             $mysqli->close();

            }   
        }
    }

   
?>